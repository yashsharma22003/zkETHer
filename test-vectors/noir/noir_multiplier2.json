{"noir_version":"1.0.0-beta.12+9a5b3695b42e391fa27c48e87b9bbb07523d664d","hash":"1276020594456143694","abi":{"parameters":[{"name":"public_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"private_nullifier","type":{"kind":"field"},"visibility":"private"},{"name":"private_secret","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"6703277390738867884":{"error_kind":"string","string":"Commitment mismatch"}}},"bytecode":"H4sIAAAAAAAA/7VRSw7CIBQsn1bXnuQ9PuWxc+MxXEikd/BOnsMLeAavYaQpJoTGjW0nmczwAmQYWDNhnyibOVjWY1YNvTHRqYgaL6B8IAvGhp6Q0JK9KtI6kiHng3fg0eiIg/V6gAmiuAsWYsuc8v+cqh6M2Q5Fv+OaJ76zZ4UXhZfZf8+1iV3i7sd/8aoDWAZcs892vVzAirfzqlPWzFHORNb743U7PbtzvfcDaM/+dxADAAA=","debug_symbols":"nZNBroQgDIbv0rULCqLiVV5eDCpOSAgaRieZGO8+aMQZF7hwA0L92r+lnaFV9fSotO36J5R/M9ROG6MflekbOere+tt5SSAcq9Ep5a/gx+6pQTplRyjtZEwCL2mm7afnIO22j9J5K0lA2dbv3mGnjVq/luRLkziKOdthSosD52ce4zzjdOdTzL58fuJpnPdRRRDACI15YBcZYBYkIBb8joYcs6AhZyTmgV9V8Sgj5iKaRRb3IFK+OxC8uMEjoUcVSMbv5CBIeAkUNJrDRS/RFEMZC3bqpX9/ko12p+4HAmWRAG4r3Va2ql/WCE7L2qh9SLrJNj8zM76HYAlTNbi+Ue3k1Bphs/mYHw==","file_map":{"50":{"source":"use poseidon::poseidon2::Poseidon2;\n\nfn main(\n    public_commitment: pub Field,\n    private_nullifier: Field,\n    private_secret: Field,\n) {\n    let recomputed_commitment = Poseidon2::hash([private_secret, private_nullifier], 2);\n    assert(public_commitment == recomputed_commitment, \"Commitment mismatch\");\n}\n","path":"/Users/sanjaysirangi/Desktop/zkether2/src/main.nr"},"57":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/sanjaysirangi/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"}},"names":["main"],"brillig_names":[]}